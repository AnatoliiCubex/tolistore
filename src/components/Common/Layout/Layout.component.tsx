import React, { PropsWithChildren, useEffect, useMemo } from "react";
import Head from "next/head";
import classNames from "classnames";
import Cookies from "js-cookie";
import jwtDecode from "jwt-decode";

import { AccessToken } from "@customTypes/index";

import { useAppDispatch } from "@hooks/redux";
import { useProfileSelector } from "@reducers/profile/useProfileSelector";
import { useProfileActions } from "@reducers/profile/useProfileActions";
import { getUserDataThunk } from "@reducers/profile/profile.thunk";

import { Header } from "@components/Common/Header";
import { Scrolling } from "@components/Common/Scrolling";

import styles from "./Layout.module.scss";

const siteTitle = "Tolistore";

export const LayoutComponent = React.forwardRef<
  HTMLDivElement,
  PropsWithChildren
>(({ children }, ref) => {
  const { accessToken, isSetFromReducer } = useProfileSelector();
  const { changeAccessToken } = useProfileActions();
  const lastSavedToken = useMemo(() => accessToken, []);
  const dispatch = useAppDispatch();

  const layoutClassName = classNames(`${styles.layout}`);

  useEffect(() => {
    if (accessToken) return;

    const token = Cookies.get("accessToken");
    if (typeof token === "string") {
      changeAccessToken(token);
    }
  }, []);

  useEffect(() => {
    if (!accessToken || !isSetFromReducer || lastSavedToken === accessToken)
      return;

    const decoded = jwtDecode<AccessToken>(accessToken);
    dispatch(getUserDataThunk(decoded.sub));
  }, [accessToken]);

  return (
    <div className={layoutClassName}>
      <Head>
        <title>{siteTitle}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <main ref={ref}>
        <Scrolling vertical className='container'>
          {children}
        </Scrolling>
      </main>
    </div>
  );
});

LayoutComponent.displayName = "Layout";
